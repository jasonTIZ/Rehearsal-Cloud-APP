package com.app.rehearsalcloud.utils

import android.content.Context
import com.app.rehearsalcloud.model.audiofile.AudioFile
import java.io.File
import java.io.FileOutputStream
import java.util.zip.ZipInputStream

// Utility function to handle .zip file extraction
object ZipUtils {
    fun unzipSongFiles(zipFile: File, songId: Int, context: Context): List<AudioFile> {
        val songFolder = File(context.filesDir, "songs/$songId")
        if (!songFolder.exists()) {
            songFolder.mkdirs()
        }

        val audioFiles = mutableListOf<AudioFile>()
        ZipInputStream(zipFile.inputStream()).use { zis ->
            var entry = zis.nextEntry
            while (entry != null) {
                if (!entry.isDirectory) {
                    val fileName = entry.name
                    val fileExtension = fileName.substringAfterLast(".", "")
                    if (isAudioFile(fileExtension)) {
                        val outputFile = File(songFolder, fileName)
                        FileOutputStream(outputFile).use { fos ->
                            val buffer = ByteArray(1024)
                            var len: Int
                            while (zis.read(buffer).also { len = it } > 0) {
                                fos.write(buffer, 0, len)
                            }
                        }
                        val audioFile = AudioFile(
                            id = 0, // Auto-generated by Room
                            fileName = fileName,
                            filePath = outputFile.absolutePath,
                            fileExtension = fileExtension,
                            fileSize = entry.size,
                            songId = songId
                        )
                        audioFiles.add(audioFile)
                    }
                }
                zis.closeEntry()
                entry = zis.nextEntry
            }
        }
        return audioFiles
    }

    private fun isAudioFile(extension: String): Boolean {
        return extension.equals("mp3", ignoreCase = true) ||
                extension.equals("wav", ignoreCase = true) ||
                extension.equals("aac", ignoreCase = true) ||
                extension.equals("m4a", ignoreCase = true)
    }
}